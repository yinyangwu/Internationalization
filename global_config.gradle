//所有工程都要用的公共配置，由各个子模块直接apply from
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion BUILD_TOOLS_VERSION

    defaultConfig {
        if (project.plugins.hasPlugin('com.android.application')) {
            applicationId PROD_APPLICATION_ID
        }
        minSdkVersion MIN_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode VERSION_CODE.toInteger()
        versionName VERSION_NAME

        multiDexEnabled true

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }

        //打包语言，减少包体积，指定语言只使用繁体、简体、英文，注意英文是默认语言，可以不写，resConfigs()已过时
        resConfigs "zh-rCN", "zh-rTW"

        vectorDrawables.useSupportLibrary = true

        signingConfigs {
            abroad {
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
            }
            domestic {
                keyAlias KEY_ALIAS
                keyPassword KEY_PASSWORD
                storeFile file(STORE_FILE)
                storePassword STORE_PASSWORD
            }
        }

        sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
                java.srcDirs = ['src/main/java']
                aidl.srcDirs = ['src/main/aidl']
                res.srcDirs = ['src/main/res']
                assets.srcDirs = ['src/main/assets']
            }
            abroaddev {
                manifest.srcFile 'src/abroaddev/AndroidManifest.xml'
                java.srcDirs 'src/abroaddev/java'
                res.srcDirs 'src/abroaddev/res'
            }
            abroadprod {
                manifest.srcFile 'src/abroadprod/AndroidManifest.xml'
                java.srcDirs 'src/abroadprod/java'
                res.srcDirs 'src/abroadprod/res'
            }
            domesticdev {
                manifest.srcFile 'src/domesticdev/AndroidManifest.xml'
                java.srcDirs 'src/domesticdev/java'
                res.srcDirs 'src/domesticdev/res'
            }
            domesticprod {
                manifest.srcFile 'src/domesticprod/AndroidManifest.xml'
                java.srcDirs 'src/domesticprod/java'
                res.srcDirs 'src/domesticprod/res'
            }
        }

        flavorDimensions 'PACKAGE'
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        abroaddev {
            dimension = 'PACKAGE'
            if (project.plugins.hasPlugin('com.android.application')) {
                applicationId DEV_APPLICATION_ID
            }
            signingConfig signingConfigs.abroad
            buildConfigField 'String', 'FLAVOR_NAME', '\"abroad\"'
        }
        abroadprod {
            dimension = 'PACKAGE'
            if (project.plugins.hasPlugin('com.android.application')) {
                applicationId PROD_APPLICATION_ID
            }
            signingConfig signingConfigs.abroad
            buildConfigField 'String', 'FLAVOR_NAME', '\"abroad\"'
        }
        domesticdev {
            dimension = 'PACKAGE'
            if (project.plugins.hasPlugin('com.android.application')) {
                applicationId DEV_APPLICATION_ID
            }
            signingConfig signingConfigs.domestic
            buildConfigField 'String', 'FLAVOR_NAME', '\"domestic\"'
        }
        domesticprod {
            dimension = 'PACKAGE'
            if (project.plugins.hasPlugin('com.android.application')) {
                applicationId PROD_APPLICATION_ID
            }
            signingConfig signingConfigs.domestic
            buildConfigField 'String', 'FLAVOR_NAME', '\"domestic\"'
        }
    }

    aaptOptions {
        //添加点9图忽略
        cruncherEnabled = false
    }

    dexOptions {
        //最大堆内存
        javaMaxHeapSize "4g"
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 2
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

//aar包的引用
repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${KOTLIN_COROUTINES_VERSION}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${KOTLIN_COROUTINES_VERSION}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${KOTLIN_VERSION}"
}